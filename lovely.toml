[manifest]
version = "1.0.0"
dump_lua = true
priority = 9999999

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "local replace_card = Card(self.title_top.T.x, self.title_top.T.y, 1.2*G.CARD_W*SC_scale, 1.2*G.CARD_H*SC_scale, G.P_CARDS.S_A, G.P_CENTERS.c_base)"
position = "at"
payload = '''
local replace_card = G.FUNCS.title_screen_card(self, SC_scale)
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''G.SPLASH_BACK:define_draw_steps({{
    shader = 'splash',
    send = {
        {name = 'time', ref_table = G.SANDBOX, ref_value = 'vort_time'},
        {name = 'vort_speed', val = 0.4},
        {name = 'colour_1', ref_table = G.SANDBOX, ref_value = 'col1'},
        {name = 'colour_2', ref_table = G.SANDBOX, ref_value = 'col2'},
        {name = 'mid_flash', ref_table = G.SANDBOX, ref_value = 'mid_flash'},
        {name = 'vort_offset', val = 0},
}}})'''
position = "at"
payload = '''
if csau_enabled['enableColors'] then
    G.SPLASH_BACK:define_draw_steps({{
        shader = 'splash',
        send = {
            {name = 'time', ref_table = G.SANDBOX, ref_value = 'vort_time'},
            {name = 'vort_speed', val = 1},
            {name = 'colour_1', ref_table = G.SANDBOX, ref_value = 'col1'},
            {name = 'colour_2', ref_table = G.SANDBOX, ref_value = 'col2'},
            {name = 'mid_flash', ref_table = G.SANDBOX, ref_value = 'mid_flash'},
            {name = 'vort_offset', val = (2*90.15315131*os.time())%100000},
        }
    }})
    G.SPLASH_BACK:define_draw_steps({{
        shader = 'splash',
        send = {
            {name = 'time', ref_table = G.SANDBOX, ref_value = 'vort_time'},
            {name = 'vort_speed', val = 1},
            {name = 'colour_1', ref_table = G.C, ref_value = 'COLOUR1'},
            {name = 'colour_2', ref_table = G.C, ref_value = 'WHITE'},
            {name = 'mid_flash', val = 0},
            {name = 'vort_offset', val = (2*90.15315131*os.time())%100000},
        }
    }})
else
    G.SPLASH_BACK:define_draw_steps({{
        shader = 'splash',
        send = {
            {name = 'time', ref_table = G.SANDBOX, ref_value = 'vort_time'},
            {name = 'vort_speed', val = 0.4},
            {name = 'colour_1', ref_table = G.SANDBOX, ref_value = 'col1'},
            {name = 'colour_2', ref_table = G.SANDBOX, ref_value = 'col2'},
            {name = 'mid_flash', ref_table = G.SANDBOX, ref_value = 'mid_flash'},
            {name = 'vort_offset', val = 0},
        }
    }})
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "SC = Card(G.ROOM.T.w/2 - SC_scale*G.CARD_W/2, 10. + G.ROOM.T.h/2 - SC_scale*G.CARD_H/2, SC_scale*G.CARD_W, SC_scale*G.CARD_H, G.P_CARDS.empty, G.P_CENTERS['j_joker'])"
position = "at"
payload = "SC = G.FUNCS.center_splash_screen_card(SC_scale)"
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''
                local card = Card(  card_pos.x + G.ROOM.T.w/2 - G.CARD_W*card_size/2,
                                    card_pos.y + G.ROOM.T.h/2 - G.CARD_H*card_size/2,
                                    card_size*G.CARD_W, card_size*G.CARD_H, pseudorandom_element(G.P_CARDS), G.P_CENTERS.c_base)
'''
position = "at"
payload = '''
local card = G.FUNCS.splash_screen_card(card_pos, card_size)
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "amount = amount or 1"
position = "after"
payload = '''
    local eff = {}
    SMODS.calculate_context({modify_level_increment = true, card = card, hand = hand, amount = amount}, eff)
    local flags = SMODS.trigger_effects(eff)
    for i, v in ipairs(eff) do
        if v.jokers then
            if v.jokers.mult_inc then
                amount = amount * v.jokers.mult_inc
            end
        end
    end
    check_for_unlock({ type = "hand_level", hand = hand, level = G.GAME.hands[hand].level, level_after = G.GAME.hands[hand].level+amount })
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''
    for k, v in ipairs(G.play.cards) do
        if (not v.shattered) and (not v.destroyed) then
            draw_card(G.play,G.discard, it*100/play_count,'down', false, v)
            it = it + 1
        end
    end
'''
position = "at"
payload = '''
    local text,disp_text,poker_hands,scoring_hand,non_loc_disp_text = G.FUNCS.get_poker_hand_info(G.play.cards)
    local context = { scoring_name = text, scoring_hand = scoring_hand, full_hand = G.play.cards }
    for k, v in ipairs(G.play.cards) do
        if (not v.shattered) and (not v.destroyed) then
            draw_card(G.play, SMODS.return_to_hand(v, context) and G.hand or G.discard, it*100/play_count,'down', false, v)
            it = it + 1
        end
    end
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''
        create_shop_card_ui(card)
        return card
'''
position = "after"
payload = '''
    elseif G.GAME.spawnDeathcards and G.GAME.spawnDeathcards ~= 0 then
		local card = Card(area.T.x + area.T.w/2, area.T.y, G.CARD_W, G.CARD_H, G.P_CARDS.empty, G.P_CENTERS['j_csau_deathcard'])
		create_shop_card_ui(card)
		G.GAME.forcedeath = false
		G.GAME.spawnDeathcards = G.GAME.spawnDeathcards - 1
		return card
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "G.FUNCS.DT_add_money = function() if G.STAGE == G.STAGES.RUN then ease_dollars(10) end end"
position = "at"
payload = '''
G.FUNCS.DT_add_money = function() if G.STAGE == G.STAGES.RUN then ease_dollars(10000) end end
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "if G.ARGS.score_intensity.earned_score >= G.ARGS.score_intensity.required_score and G.ARGS.score_intensity.required_score > 0 then"
position = "after"
payload = '''
if G.STATE == G.STATES.HAND_PLAYED and (next(SMODS.find_card('j_csau_kerosene')) or next(SMODS.find_card('j_csau_jerma'))) then
    if not G.GAME.FLAME_ON then
        G.GAME.FLAME_ON = #SMODS.find_card('j_csau_kerosene') + #SMODS.find_card('j_csau_jerma')
    end
end
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "_pool[#_pool + 1] = v.key"
position = "before"
payload = '''
if G.GAME.selected_back and G.GAME.selected_back.effect.center.key == "b_csau_vine" or G.GAME.selected_back.effect.center.key == "b_csau_varg" then
    local csau_rate = (G.GAME.selected_back.effect.center.key == "b_csau_vine" and 2) or (G.GAME.selected_back.effect.center.key == "b_csau_varg" and 1) or 0
    if string.sub(v.key, 1, 6) == 'j_csau' then
        for i=1, csau_rate do
            _pool[#_pool + 1] = v.key
            _pool_size = _pool_size + 1
        end
    end
end
if next(SMODS.find_card('j_csau_frich')) then
    if G.foodjokers[v.key] then
        _pool[#_pool + 1] = v.key
        _pool_size = _pool_size + 1
    end
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''
    tab_definition_function_args = 'Audio'
  }
'''
position = "after"
payload = '''
  if csau_enabled['enableColors'] then
      tabs[#tabs+1] = {
          label = localize('b_set_colors'),
          tab_definition_function = G.UIDEF.settings_tab,
          tab_definition_function_args = 'Colors'
      }
  end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "G.STATE = G.STATES.GAME_OVER; G.STATE_COMPLETE = false"
position = "before"
payload = '''
if next(find_joker('2 Kings 2:23-24')) then
    check_for_unlock({ type = "shebear_mauling" })
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local temp_hand = {}"
position = "before"
payload = "check_for_unlock({type = 'unlock_kings'})"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
return {
    message = localize('k_saved_ex'),
    saved = true,
    colour = G.C.RED
}
'''
position = "before"
payload = "check_for_unlock({ type = 'unlock_epoch' })"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = 'local text,disp_text,poker_hands,scoring_hand,non_loc_disp_text = G.FUNCS.get_poker_hand_info(G.play.cards)'
position = "after"
payload = "G.FUNCS.ach_pepsecretunlock(text)"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if add and not G.GAME.banned_keys[v.key] then"
position = "before"
payload = '''
if _append == "jud" and v.key == 'j_csau_hell' then
    add = false
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''
G.SETTINGS.CUSTOM_DECK.Collabs[args.cycle_config.curr_suit] = G.COLLABS.options[args.cycle_config.curr_suit][args.to_key] or 'default'
  for k, v in pairs(G.I.CARD) do
    if v.config and v.config.card and v.children.front and v.ability.effect ~= 'Stone Card' then
      v:set_sprites(nil, v.config.card)
    end
  end
'''
position = "after"
payload = '''
if csau_enabled['enableSkins'] then
    local swap_node = G.OVERLAY_MENU:get_UIE_by_ID('collab_credit')
    if swap_node then
        for i=1, #swap_node.children do
            swap_node.children[i]:remove()
            swap_node.children[i] = nil
        end
        for k, v in pairs(G.COLLABS.options[args.cycle_config.curr_suit]) do
            if G.COLLABS.options[args.cycle_config.curr_suit][args.to_key] == v then
                current_skin = v
                string = G.localization.misc.dictionary.vs_collab_credits[args.cycle_config.curr_suit][current_skin] or " "
            end
        end
        local caption = {n=G.UIT.T, config={text = string, scale = 0.35, colour = G.C.WHITE, shadow = true}}
        swap_node.UIBox:add_child(caption, swap_node)
    end
    G.FUNCS.ach_characters_check()
    G.FUNCS.ach_vineshroom_check()
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "engine/controller.lua"
pattern = "if self.text_input_hook then"
position = "before"
payload = '''
    if csau_enabled['enableEasterEggs'] then
        if key == mgt[mgt_num] then
            if key == "o" then
                G.debug_background_toggle = not G.debug_background_toggle
                mgt_num = 1
            else
                mgt_num = mgt_num + 1
            end
        else
            mgt_num = 1
        end
	end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.E_MANAGER:add_event(Event({trigger = 'after',delay = 0.1,func = function() G.hand.highlighted[i]:set_ability(G.P_CENTERS[self.ability.consumeable.mod_conv]);return true end }))"
position = "before"
payload = '''
    if self.ability.name == "The Tower" and G.hand.highlighted[i]:get_id() == 12 then
        check_for_unlock({ type = "unlock_villains" })
    end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if v ~= chosen_joker then"
position = "at"
payload = '''
if v ~= chosen_joker and SMODS.will_destroy_card() then
check_for_unlock({ type = "unlock_killjester" })
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if v ~= eligible_card and (not v.ability.eternal) then v:start_dissolve(nil, _first_dissolve);_first_dissolve = true end"
position = "at"
payload = '''
if v ~= eligible_card and (not v.ability.eternal) and SMODS.will_destroy_card() then
 v:start_dissolve(nil, _first_dissolve)
 _first_dissolve = true
 check_for_unlock({ type = "unlock_killjester" })
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
local sliced_card = G.jokers.cards[my_pos+1]
'''
position = "before"
payload = '''
check_for_unlock({ type = "unlock_killjester" })
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if my_pos and G.jokers.cards[my_pos+1] and not self.getting_sliced and not G.jokers.cards[my_pos+1].ability.eternal and not G.jokers.cards[my_pos+1].getting_sliced then "
position = "at"
payload = "if my_pos and G.jokers.cards[my_pos+1] and not self.getting_sliced and not G.jokers.cards[my_pos+1].ability.eternal and not G.jokers.cards[my_pos+1].getting_sliced and SMODS.will_destroy_card() then "
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if joker_to_destroy and not (context.blueprint_card or self).getting_sliced then"
position = "at"
payload = '''
if joker_to_destroy and not (context.blueprint_card or self).getting_sliced and SMODS.will_destroy_card() then
check_for_unlock({ type = "unlock_killjester" })
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Ramen' and not context.blueprint then"
position = "at"
payload = "if self.ability.name == 'Ramen' and not context.blueprint and SMODS.food_expires(context) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Popcorn' and not context.blueprint then"
position = "at"
payload = "if self.ability.name == 'Popcorn' and not context.blueprint and SMODS.food_expires(context) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Ice Cream' and not context.blueprint then"
position = "at"
payload = "if self.ability.name == 'Ice Cream' and not context.blueprint and SMODS.food_expires(context) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Seltzer' and not context.blueprint then"
position = "at"
payload = "if self.ability.name == 'Seltzer' and not context.blueprint and SMODS.food_expires(context) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Turtle Bean' and not context.blueprint then"
position = "at"
payload = "if self.ability.name == 'Turtle Bean' and not context.blueprint and SMODS.food_expires(context) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Gros Michel' or self.ability.name == 'Cavendish' then"
position = "at"
payload = "if (self.ability.name == 'Gros Michel' or self.ability.name == 'Cavendish') and SMODS.food_expires(context) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''end
if self.ability.name == 'Mr. Bones' and context.game_over and'''
position = "before"
payload = '''else
if self.ability.name == 'Gros Michel' and not SMODS.food_expires(context) and next(SMODS.find_card("j_csau_bunji")) then
    check_for_unlock({ type = "preserve_gros" })
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''
{n=G.UIT.B, config = {w=0.1,h=0.6}},
{n=G.UIT.T, config={text = localize('b_use'),colour = G.C.UI.TEXT_LIGHT, scale = 0.55, shadow = true}}
'''
position = "at"
payload = '''
{n=G.UIT.B, config = {w=card.ability.set == "VHS" and 0.2 or 0.1,h=0.6 }},
{n=G.UIT.T, config={text = card.ability.set == "VHS" and (card.ability.activated and localize('b_deactivate') or localize('b_activate')) or localize('b_use'),colour = G.C.UI.TEXT_LIGHT, scale = card.ability.set == "VHS" and 0.75 or 0.55, shadow = true}}
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
G.E_MANAGER:add_event(Event({ --Add bonus chips from this card
                    trigger = 'before',
                    delay = delay,
                    func = function()
                    if extrafunc then extrafunc() end
                    attention_text({
                        text = text,
                        scale = config.scale or 1,
                        hold = delay - 0.2,
                        backdrop_colour = colour,
                        align = card_aligned,
                        major = card,
                        offset = {x = 0, y = y_off}
                    })
                    play_sound(sound, 0.8+percent*0.2, volume)
                    if not extra or not extra.no_juice then
                        card:juice_up(0.6, 0.1)
                        G.ROOM.jiggle = G.ROOM.jiggle + 0.7
                    end
'''
position = "at"
payload = '''
G.E_MANAGER:add_event(Event({ --Add bonus chips from this card
                    trigger = extra ~= nil and extra.trigger or 'before',
                    delay = delay,
                    blocking = extra ~= nil and extra.blocking or nil,
                    blockable = extra ~= nil and extra.blockable or nil,
                    func = function()
                    if extrafunc then extrafunc() end
                    attention_text({
                        text = text,
                        scale = config.scale or 1,
                        hold = delay - 0.2,
                        backdrop_colour = colour,
                        align = card_aligned,
                        major = card,
                        offset = {x = 0, y = y_off}
                    })
                    play_sound(sound, 0.8+percent*0.2, volume)
                    if not extra or not extra.no_juice then
                        card:juice_up(extra ~= nil and extra.juice_num1 or 0.6, extra ~= nil and extra.juice_num2 or 0.1)
                        G.ROOM.jiggle = G.ROOM.jiggle + 0.7
                    end
                    if card and extra and extra.update_sprites then
                        card:set_sprites(card.config.center)
                    end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''
mult = mod_mult(G.GAME.hands[text].mult)
hand_chips = mod_chips(G.GAME.hands[text].chips)
'''
position = "before"
payload = '''
local text,dt,ph,sh,nldt = G.FUNCS.get_poker_hand_info(G.play.cards)
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "local last_tarot_planet = fool_c and localize{type = 'name_text', key = fool_c.key, set = fool_c.set} or localize('k_none')"
position = "at"
payload = '''
local last_tarot_planet = localize('k_none')
if fool_c == 'c_csau_arrow' then
    last_tarot_planet = fool_c and localize{type = 'name_text', key = fool_c.key, set = fool_c.set, vars = { G.GAME.modifiers.max_stands or 1, (card.area.config.collection and localize('k_stand')) or (G.GAME.modifiers.max_stands > 1 and localize('b_stand_cards') or localize('k_stand')) }} or localize('k_none')
else
    last_tarot_planet = fool_c and localize{type = 'name_text', key = fool_c.key, set = fool_c.set} or localize('k_none')
end
'''
match_indent = true

# Make Perkeo only copy consumables (and not Stands)
# (Slightly modified code from Cryptid, this should conflict with Cryptid's lovely patch of this,
# but it should maintain Cryptid compatibility, cause it does the same thing)
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if G.consumeables.cards[1] then'''
position = "at"
payload = '''local eligibleJokers = {}
for i = 1, #G.consumeables.cards do
    if G.consumeables.cards[i].ability.consumeable and G.consumeables.cards[i].ability.set ~= "csau_Stand" then
        eligibleJokers[#eligibleJokers + 1] = G.consumeables.cards[i]
    end
end
if #eligibleJokers > 0 then'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''local card = copy_card(pseudorandom_element(G.consumeables.cards, pseudoseed('perkeo')), nil)'''
position = "at"
payload = '''local card = copy_card(pseudorandom_element(eligibleJokers, pseudoseed('perkeo')), nil)'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if self.ability.name == 'Ectoplasm' or self.ability.name == 'Hex' or pseudorandom('wheel_of_fortune') < G.GAME.probabilities.normal/self.ability.extra then'''
position = "at"
payload = '''if self.ability.name == 'Ectoplasm' or self.ability.name == 'Hex' or pseudorandom('wheel_of_fortune') < (G.FUNCS.nutbuster_active() and 3 or G.GAME.probabilities.normal)/self.ability.extra then'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = "elseif _c.name == \"The Wheel of Fortune\" then loc_vars = {G.GAME.probabilities.normal, cfg.extra};  info_queue[#info_queue+1] = G.P_CENTERS.e_foil; info_queue[#info_queue+1] = G.P_CENTERS.e_holo; info_queue[#info_queue+1] = G.P_CENTERS.e_polychrome; "
position = 'at'
payload = "elseif _c.name == \"The Wheel of Fortune\" then loc_vars = {G.FUNCS.nutbuster_active() and 3 or G.GAME.probabilities.normal, _c.config.extra};  info_queue[#info_queue+1] = G.P_CENTERS.e_foil; info_queue[#info_queue+1] = G.P_CENTERS.e_holo; info_queue[#info_queue+1] = G.P_CENTERS.e_polychrome;"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
if specific_vars.nominal_chips then
    localize{type = 'other', key = 'card_chips', nodes = desc_nodes, vars = {specific_vars.nominal_chips}}
end
if specific_vars.bonus_chips then
    localize{type = 'other', key = 'card_extra_chips', nodes = desc_nodes, vars = {SMODS.signed(specific_vars.bonus_chips)}}
end
'''
position = "at"
payload = '''
if card.csau_collab_credit then
    if card.csau_collab_credit.plural then
        localize{type = 'other', key = 'artists', nodes = desc_nodes, vars = {specific_vars.nominal_chips}}
    else
        localize{type = 'other', key = 'artist', nodes = desc_nodes, vars = {specific_vars.nominal_chips}}
    end
    localize{type = 'other', key = card.csau_collab_credit.key, nodes = desc_nodes, vars = card.csau_collab_credit.vars}
else
    if specific_vars.nominal_chips then
        localize{type = 'other', key = 'card_chips', nodes = desc_nodes, vars = {specific_vars.nominal_chips}}
    end
    if specific_vars.bonus_chips then
        localize{type = 'other', key = 'card_extra_chips', nodes = desc_nodes, vars = {specific_vars.bonus_chips}}
    end
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''self.cost = math.max(1, math.floor((self.base_cost + self.extra_cost + 0.5)*(100-G.GAME.discount_percent)/100))'''
position = "at"
payload = '''
local voucher_discount = 0
if self.ability.set == "Voucher" then
    voucher_discount = G.GAME.voucher_discount or 0
end
self.cost = math.max(1, math.floor((self.base_cost + self.extra_cost + 0.5)*(100-(G.GAME.discount_percent+voucher_discount))/100))'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = "context.other_card:is_suit(self.ability.extra.suit) then"
position = 'at'
match_indent = true
payload = "context.other_card:is_suit(G.GAME and G.GAME.wigsaw_suit or self.ability.extra.suit) then"

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = "self.ability.name == 'Wrathful Joker' or self.ability.name == 'Gluttonous Joker' then loc_vars = {self.ability.extra.s_mult, localize(self.ability.extra.suit, 'suits_singular')}"
position = 'at'
match_indent = true
payload = "self.ability.name == 'Wrathful Joker' or self.ability.name == 'Gluttonous Joker' then loc_vars = {self.ability.extra.s_mult, localize(G.GAME and G.GAME.wigsaw_suit or self.ability.extra.suit, 'suits_singular'), colours = {G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or self.ability.extra.suit]}}"

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''context.other_card:is_suit("Diamonds") then'''
position = 'at'
match_indent = true
payload = '''context.other_card:is_suit(G.GAME and G.GAME.wigsaw_suit or "Diamonds") then'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''context.other_card:is_suit("Clubs") then'''
position = 'at'
match_indent = true
payload = '''context.other_card:is_suit(G.GAME and G.GAME.wigsaw_suit or "Clubs") then'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''context.other_card:is_suit("Spades") then'''
position = 'at'
match_indent = true
payload = '''context.other_card:is_suit(G.GAME and G.GAME.wigsaw_suit or "Spades") then'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''context.other_card:is_suit("Hearts") and'''
position = 'at'
match_indent = true
payload = '''context.other_card:is_suit(G.GAME and G.GAME.wigsaw_suit or "Hearts") and'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''elseif self.ability.name == 'Rough Gem' then loc_vars = {self.ability.extra}
elseif self.ability.name == 'Bloodstone' then loc_vars = {''..(G.GAME and G.GAME.probabilities.normal or 1), self.ability.extra.odds, self.ability.extra.Xmult}
elseif self.ability.name == 'Arrowhead' then loc_vars = {self.ability.extra}
elseif self.ability.name == 'Onyx Agate' then loc_vars = {self.ability.extra}'''
position = 'at'
match_indent = true
payload = '''elseif self.ability.name == 'Rough Gem' then loc_vars = {self.ability.extra, localize(G.GAME and G.GAME.wigsaw_suit or 'Diamonds', 'suits_singular'), colours = {G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or 'Diamonds']}}
elseif self.ability.name == 'Bloodstone' then loc_vars = {''..(G.GAME and G.GAME.probabilities.normal or 1), self.ability.extra.odds, self.ability.extra.Xmult, localize(G.GAME and G.GAME.wigsaw_suit or 'Hearts', 'suits_singular'), colours = {G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or 'Hearts']}}
elseif self.ability.name == 'Arrowhead' then loc_vars = {self.ability.extra, localize(G.GAME and G.GAME.wigsaw_suit or 'Spades', 'suits_singular'), colours = {G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or 'Spades']}}
elseif self.ability.name == 'Onyx Agate' then loc_vars = {self.ability.extra, localize(G.GAME and G.GAME.wigsaw_suit or 'Clubs', 'suits_singular'), colours = {G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or 'Clubs']}}'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''context.other_card:is_suit(G.GAME.current_round.ancient_card.suit) then'''
position = 'at'
match_indent = true
payload = '''context.other_card:is_suit(G.GAME and G.GAME.wigsaw_suit or G.GAME.current_round.ancient_card.suit) then'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''elseif self.ability.name == 'Ancient Joker' then loc_vars = {self.ability.extra, localize(G.GAME.current_round.ancient_card.suit, 'suits_singular'), colours = {G.C.SUITS[G.GAME.current_round.ancient_card.suit]}}'''
position = 'at'
match_indent = true
payload = '''elseif self.ability.name == 'Ancient Joker' then loc_vars = {self.ability.extra, localize(G.GAME and G.GAME.wigsaw_suit or G.GAME.current_round.ancient_card.suit, 'suits_singular'), colours = {G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or G.GAME.current_round.ancient_card.suit]}}'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''if v:is_suit('Clubs', nil, true) or v:is_suit('Spades', nil, true) then'''
position = 'at'
match_indent = true
payload = '''if v:is_suit(G.GAME and G.GAME.wigsaw_suit or 'Clubs', nil, true) or v:is_suit(G.GAME and G.GAME.wigsaw_suit or 'Spades', nil, true) then'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''elseif self.ability.name == 'Blackboard' then loc_vars = {self.ability.extra, localize('Spades', 'suits_plural'), localize('Clubs', 'suits_plural')}'''
position = 'at'
match_indent = true
payload = '''elseif self.ability.name == 'Blackboard' then loc_vars = {self.ability.extra, localize(G.GAME and G.GAME.wigsaw_suit or 'Spades', 'suits_plural'), localize(G.GAME and G.GAME.wigsaw_suit or 'Clubs', 'suits_plural'), colours = {G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or 'Spades'], G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or 'Clubs']}}'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''context.other_card:is_suit(G.GAME.current_round.castle_card.suit) and not context.blueprint then'''
position = 'at'
match_indent = true
payload = '''context.other_card:is_suit(G.GAME and G.GAME.wigsaw_suit or G.GAME.current_round.castle_card.suit) and not context.blueprint then'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''elseif self.ability.name == 'Castle' then loc_vars = {self.ability.extra.chip_mod, localize(G.GAME.current_round.castle_card.suit, 'suits_singular'), self.ability.extra.chips, colours = {G.C.SUITS[G.GAME.current_round.castle_card.suit]}}'''
position = 'at'
match_indent = true
payload = '''elseif self.ability.name == 'Castle' then loc_vars = {self.ability.extra.chip_mod, localize(G.GAME and G.GAME.wigsaw_suit or G.GAME.current_round.castle_card.suit, 'suits_singular'), self.ability.extra.chips, colours = {G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or G.GAME.current_round.castle_card.suit]}}'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''if suits["Hearts"] > 0 and
suits["Diamonds"] > 0 and
suits["Spades"] > 0 and
suits["Clubs"] > 0 then
    return {
        message = localize{type='variable',key='a_xmult',vars={self.ability.extra}},
        Xmult_mod = self.ability.extra
    }
end'''
position = 'at'
match_indent = true
payload = '''if G.GAME and G.GAME.wigsaw_suit then
    if suits[G.GAME.wigsaw_suit] > 0 then
        return {
            message = localize{type='variable',key='a_xmult',vars={self.ability.extra}},
            Xmult_mod = self.ability.extra
        }
    end
else
    if suits["Hearts"] > 0 and
    suits["Diamonds"] > 0 and
    suits["Spades"] > 0 and
    suits["Clubs"] > 0 then
        return {
            message = localize{type='variable',key='a_xmult',vars={self.ability.extra}},
            Xmult_mod = self.ability.extra
        }
    end
end
'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''elseif self.ability.name == 'Flower Pot' then loc_vars = {self.ability.extra}'''
position = 'at'
match_indent = true
payload = '''elseif self.ability.name == 'Flower Pot' then loc_vars = {self.ability.extra, localize(G.GAME and G.GAME.wigsaw_suit or 'Diamonds', 'suits_singular'), localize(G.GAME and G.GAME.wigsaw_suit or 'Clubs', 'suits_singular'), localize(G.GAME and G.GAME.wigsaw_suit or 'Hearts', 'suits_singular'), localize(G.GAME and G.GAME.wigsaw_suit or 'Spades', 'suits_singular'), colours = {G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or 'Diamonds'], G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or 'Clubs'], G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or 'Hearts'], G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or 'Spades']}}'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = "if SMODS.seeing_double_check(context.scoring_hand, 'Clubs') then"
position = 'at'
match_indent = true
payload = "if SMODS.seeing_double_check(context.scoring_hand, G.GAME and G.GAME.wigsaw_suit or 'Clubs') then"

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''elseif self.ability.name == 'Seeing Double' then loc_vars = {self.ability.extra}'''
position = 'at'
match_indent = true
payload = '''elseif self.ability.name == 'Seeing Double' then loc_vars = {self.ability.extra, localize(G.GAME and G.GAME.wigsaw_suit or 'Clubs', 'suits_singular'), colours = {G.C.SUITS[G.GAME and G.GAME.wigsaw_suit or 'Clubs']}}'''


[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''function Card:set_base(card, initial)'''
position = 'at'
match_indent = true
payload = '''function Card:set_base(card, initial, delay_sprites)'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''if next(card) then'''
position = 'at'
match_indent = true
payload = '''if next(card) and not delay_sprites then'''


#
# Adds the ability to emplace cards at a specified index
#

# CardArea:emplace()
[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = '''
function CardArea:emplace(card, location, stay_flipped)'''
position = "at"
payload = '''function CardArea:emplace(card, location, stay_flipped, created, copied, index)'''
match_indent = true
times = 1

# CardArea:emplace()
[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = '''if location == 'front' or self.config.type == 'deck' then 
    table.insert(self.cards, 1, card)
else
    self.cards[#self.cards+1] = card
end'''
position = "at"
payload = '''
if index then
    table.insert(self.cards, index, card)
elseif location == 'front' or self.config.type == 'deck' then 
    table.insert(self.cards, 1, card)
else
    self.cards[#self.cards+1] = card
end'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local card = create_card('Tarot_Planet', G.consumeables, nil, nil, nil, nil, G.GAME.last_tarot_planet, 'fool')"
position = "at"
payload = '''
local card
if next(SMODS.find_card("c_csau_steel_civil")) then
    card = create_card('Tarot_Planet', G.consumeables, nil, nil, nil, nil, 'c_hanged_man', 'fool')
else
    card = create_card('Tarot_Planet', G.consumeables, nil, nil, nil, nil, G.GAME.last_tarot_planet, 'fool')
end
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "local fool_c = G.GAME.last_tarot_planet and G.P_CENTERS[G.GAME.last_tarot_planet] or nil"
position = "at"
payload = "local fool_c = ((next(SMODS.find_card('c_csau_steel_civil')) and G.P_CENTERS['c_hanged_man']) or G.GAME.last_tarot_planet and G.P_CENTERS[G.GAME.last_tarot_planet] or nil)"
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if pseudorandom(self.ability.name == 'Cavendish' and 'cavendish' or 'gros_michel') < G.GAME.probabilities.normal/self.ability.extra.odds then"
position = "after"
payload = "if self.ability.name == 'Gros Michel' then check_for_unlock({ type = 'gros_extinct' }) end"
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
                attention_text({
                    text = localize('k_nope_ex'),
'''
position = "before"
payload = "check_for_unlock({ type = 'wheel_nope' })"
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
                attention_text({
                    text = localize('k_nope_ex'),
'''
position = "before"
payload = "check_for_unlock({ type = 'wheel_nope' })"
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "elseif self.ability.name == 'The Wheel of Fortune' then"
position = "after"
payload = "check_for_unlock({ type = 'wheel_trigger' })"
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "elseif self.name == 'The Manacle' and not self.disabled then"
position = "before"
payload = "elseif self.name == 'The Wall' and not self.disabled then check_for_unlock({ type = 'defeat_wall' })"
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "local mult = card:get_chip_mult()"
position = "before"
payload = '''
local proc = nil
if next(SMODS.find_card('c_csau_steel_d4c_love')) then
    local triggers = {
        [1] = 'mult',
        [2] = 'dollars',
    }
    proc = triggers[pseudorandom('d4c_lovetrain', 1, 2)]
end
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "local mult = card:get_chip_mult()"
position = "at"
payload = "local mult = card:get_chip_mult(proc)"
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "local p_dollars = card:get_p_dollars()"
position = "at"
payload = "local p_dollars = card:get_p_dollars(proc)"
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:get_chip_mult()"
position = "at"
payload = "function Card:get_chip_mult(proc)"
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if pseudorandom('lucky_mult') < G.GAME.probabilities.normal/5 then"
position = "at"
payload = "if proc and proc == 'mult' or (pseudorandom('lucky_mult') < G.GAME.probabilities.normal/5) then"
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:get_p_dollars()"
position = "at"
payload = "function Card:get_p_dollars(proc)"
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if pseudorandom('lucky_money') < G.GAME.probabilities.normal/15 then"
position = "at"
payload = "if proc and proc == 'dollars' or (pseudorandom('lucky_money') < G.GAME.probabilities.normal/15) then"
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''if G.shop then 
    G.shop.alignment.offset.y = G.shop.alignment.offset.py
    G.shop.alignment.offset.py = nil
end'''
position = "after"
payload = '''if G.morshu_save then 
    G.morshu_save.alignment.offset.y = G.morshu_save.alignment.offset.py
    G.morshu_save.alignment.offset.py = nil
end'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''if G.shop and not G.shop.alignment.offset.py then
  G.shop.alignment.offset.py = G.shop.alignment.offset.y
  G.shop.alignment.offset.y = G.ROOM.T.y + 29
end'''
position = "after"
payload = '''if G.morshu_save and not G.morshu_save.alignment.offset.py then
  G.morshu_save.alignment.offset.py = G.morshu_save.alignment.offset.y
  G.morshu_save.alignment.offset.y = G.ROOM.T.y + 29
end'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''if G.shop and G.shop.alignment.offset.py then 
    G.shop.alignment.offset.y = G.shop.alignment.offset.py
    G.shop.alignment.offset.py = nil
end'''
position = "after"
payload = '''if G.morshu_save and G.morshu_save.alignment.offset.py then
    G.morshu_save.alignment.offset.y = G.morshu_save.alignment.offset.py
    G.morshu_save.alignment.offset.py = nil
end'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''G.shop.alignment.offset.y = G.ROOM.T.y + 29
G.SHOP_SIGN.alignment.offset.y = -15
return true'''
position = "at"
payload = '''G.shop.alignment.offset.y = G.ROOM.T.y + 29
if G.morshu_save then G.morshu_save.alignment.offset.y = G.ROOM.T.y + 29 end
G.SHOP_SIGN.alignment.offset.y = -15
return true'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''self.load_shop_vouchers = nil'''
position = "after"
payload = '''self.load_morshu_area = nil
if G.morshu_save then G.morshu_save:remove() end
G.morshu_save = nil'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "Jimbo:add_speech_bubble('lq_'..math.random(1,10), nil, {quip = true})"
position = "at"
payload = '''
local range_start = 1
local range_end = 10
if localize('wq_20') then
    range_end = 20
    if G.GAME.selected_back and (G.GAME.selected_back.effect.center.key == "b_csau_vine" or G.GAME.selected_back.effect.center.key == "b_csau_varg") then
        if G.GAME.selected_back.effect.center.key == "b_csau_vine" then
            range_end = 11
        elseif G.GAME.selected_back.effect.center.key == "b_csau_varg" then
            range_start = 10
            range_end = 20
        end
    end
end
Jimbo:add_speech_bubble('lq_'..math.random(range_start, range_end), nil, {quip = true})
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "Jimbo:add_speech_bubble('wq_'..math.random(1,7), nil, {quip = true})"
position = "at"
payload = '''
local range_start = 1
local range_end = 10
if localize('wq_20') then
    range_end = 20
    if G.GAME.selected_back and (G.GAME.selected_back.effect.center.key == "b_csau_vine" or G.GAME.selected_back.effect.center.key == "b_csau_varg") then
        if G.GAME.selected_back.effect.center.key == "b_csau_vine" then
            range_end = 10
        elseif G.GAME.selected_back.effect.center.key == "b_csau_varg" then
            range_start = 10
            range_end = 20
        end
    end
end
Jimbo:add_speech_bubble('wq_'..math.random(range_start,range_end), nil, {quip = true})
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "edition = poll_edition('wheel_of_fortune', nil, true, true)"
position = "at"
payload = '''
local nukie = G.FUNCS.find_activated_tape('c_csau_nukie')
local no_neg = true
if nukie then no_neg = false end
edition = poll_edition('wheel_of_fortune', nil, no_neg, true)
if edition == 'e_polychrome' and next(SMODS.find_card('j_csau_speen')) then
    check_for_unlock({ type = "high_speen" })
end
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if self.ability.set == 'Joker' and not self.sticker_run then'''
position = "before"
payload = '''
if self.ability.set == 'csau_Stand' and not self.sticker_run then
    self.sticker_run = get_stand_win_sticker(self.config.center) or 'NONE'
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "set_joker_win()"
position = "after"
payload = "set_stand_win()"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:set_seal(_seal, silent, immediate)"
position = "at"
payload = "function Card:set_seal(_seal, silent, immediate, args)"
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''self:juice_up(0.3, 0.3)
             play_sound(sound.sound, sound.per, sound.vol)'''
position = "after"
payload = '''if args and args.set_func and type(args.set_func) == 'function' then
    args.set_func()
end'''
match_indent = true
times = 2

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''local rows, protos = {}, {'collection', 'challenges', 'joker_stickers', 'deck_stake_wins'}
_profile_progress = _profile_progress or G.PROFILES[G.SETTINGS.profile].progress'''
position = "at"
payload = '''local rows, protos = {}, {'collection', 'challenges', 'joker_stickers', 'stand_stickers', 'deck_stake_wins'}
_profile_progress = _profile_progress or G.PROFILES[G.SETTINGS.profile].progress
if not _profile_progress.stand_stickers then
    local of = 0; for _, v in pairs(G.P_CENTERS) do if v.set == 'csau_Stand' then of = of + 1 end end
    _profile_progress.stand_stickers = {tally = 0, of = of*#G.P_CENTER_POOLS.Stake }
end'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "_profile_progress.joker_stickers.tally/_profile_progress.joker_stickers.of +"
position = "after"
payload = '''_profile_progress.stand_stickers.tally/_profile_progress.stand_stickers.of +'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "elseif v == 'joker_stickers' then"
position = "before"
payload = '''elseif v == 'stand_stickers' then
    tab, val, max = _profile_progress.stand_stickers, 'tally', _profile_progress.stand_stickers.of'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''{n=G.UIT.T, config={text = " (".._profile_progress.challenges.tally..'/'.._profile_progress.challenges.of..")", scale = 0.35, colour = G.C.JOKER_GREY}}
    }'''
position = "after"
payload = '''or v == 'stand_stickers' and {
      {n=G.UIT.O, config={object = DynaText({string = {math.floor(0.01+100*_profile_progress.stand_stickers.tally/_profile_progress.stand_stickers.of)..'%'}, colours = {G.C.WHITE},shadow = true, float = true, scale = 0.55*text_scale})}},
      {n=G.UIT.T, config={text = " (".._profile_progress.stand_stickers.tally..'/'.._profile_progress.stand_stickers.of..")", scale = 0.35, colour = G.C.JOKER_GREY}}
    }'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if G.GAME.blind.name == 'The Serpent' and"
position = "before"
payload = '''
if G.GAME.blind.name ~= 'The Serpent' then
    local miami = G.FUNCS.find_activated_tape('c_csau_miami')
    if miami then
        miami:juice_up()
        hand_space = hand_space + miami.ability.extra.draw_mod
        miami.ability.extra.uses = miami.ability.extra.uses+1
        if miami.ability.extra.uses >= miami.ability.extra.runtime then
            G.FUNCS.destroy_tape(miami)
            miami.ability.destroyed = true
        end
    end
end
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''for i=1, hand_space do --draw cards from deckL
        if G.STATE == G.STATES.TAROT_PACK or G.STATE == G.STATES.SPECTRAL_PACK then
            draw_card(G.deck,G.hand, i*100/hand_space,'up', true)
        else
            draw_card(G.deck,G.hand, i*100/hand_space,'up', true)
        end
    end
'''
position = "at"
payload = '''
SMODS.draw_cards_from_deck(hand_space)
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''end
if self.ability.name == 'Ectoplasm' then'''
position = "at"
payload = '''end
if self.ability.name == 'Ectoplasm' and SMODS.spectral_lower_handsize() then'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.hand:change_size(-1)"
position = "at"
payload = '''
if SMODS.spectral_lower_handsize() then
    G.hand:change_size(-1)
end
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "play_sound('tarot2', 0.76, 0.4);return true end}))"
position = "at"
payload = "play_sound(G.FUNCS.nutbuster_active() and 'csau_doot' or 'tarot2', G.FUNCS.nutbuster_active() and 1 or 0.76, 0.4);return true end}))"
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if specific_vars and specific_vars.sticker then info_queue[#info_queue+1] = {key = string.lower(specific_vars.sticker)..'_sticker', set = 'Other'} end"
position = "at"
payload = '''if specific_vars and specific_vars.sticker and type(specific_vars.sticker) ~= 'number' then
    info_queue[#info_queue+1] = {key = string.lower(specific_vars.sticker)..'_sticker', set = 'Other', vars = { localize('k_'..string.lower(_c.set)) or localize('k_joker') }}
end'''
match_indent = true
times = 2

[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = '''function Tag:generate_UI(_size)
    _size = _size or 0.8

    local tag_sprite_tab = nil

    local tag_sprite = Sprite(0,0,_size*1,_size*1,G.ASSET_ATLAS[(not self.hide_ability) and G.P_TAGS[self.key].atlas or "tags"], (self.hide_ability) and G.tag_undiscovered.pos or self.pos)
    tag_sprite.T.scale = 1
    tag_sprite_tab = {n= G.UIT.C, config={align = "cm", ref_table = self, group = self.tally}, nodes={
        {n=G.UIT.O, config={w=_size*1,h=_size*1, colour = G.C.BLUE, object = tag_sprite, focus_with_object = true}},
    }}'''
position = "at"
payload = '''function Tag:generate_UI(_size)
    local _sizeX = (G.P_TAGS[self.key].width and G.P_TAGS[self.key].width/34 * (_size or 1) * 0.6) or _size or 0.8
    local _sizeY = (G.P_TAGS[self.key].height and G.P_TAGS[self.key].height/34 * (_size or 1) * 0.6) or _size or 0.8

    local tag_sprite_tab = nil

    local tag_sprite = Sprite(0,0,_sizeX*1,_sizeY*1,G.ASSET_ATLAS[(not self.hide_ability) and G.P_TAGS[self.key].atlas or "tags"], (self.hide_ability) and G.tag_undiscovered.pos or self.pos)
    tag_sprite.T.scale = 1
    tag_sprite_tab = {n= G.UIT.C, config={align = "cm", ref_table = self, group = self.tally}, nodes={
        {n=G.UIT.O, config={w=_sizeX*1,h=_sizeY*1, colour = G.C.BLUE, object = tag_sprite, focus_with_object = true}},
    }}'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "card.ability.consumeable then --Add a use button"
position = "at"
payload = "card.ability.consumeable and card.ability.set ~= 'csau_Stand' then --Add a use button"
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "button_contents = {n=G.UIT.T, config={text = localize('b_use'),colour = G.C.WHITE, scale = 0.5}}"
position = "at"
payload = "button_contents = {n=G.UIT.T, config={text = args.card.ability.set == 'VHS' and localize('b_'..(args.card.ability.activated and 'de' or '')..'activate') or localize('b_use'),colour = G.C.WHITE, scale = 0.5}}"
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local id = self:get_id()"
position = "at"
payload = "local id = self:get_id(true)"
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "add_round_eval_row({bonus = true, name='interest', pitch = pitch, dollars = G.GAME.interest_amount*math.min(math.floor(G.GAME.dollars/5), G.GAME.interest_cap/5)})"
position = "at"
payload = '''
if G.FUNCS.find_activated_tape('c_csau_blooddebts') then
    add_round_eval_row({bonus = true, name='interest', pitch = pitch, dollars = G.GAME.interest_amount*math.min(math.floor(G.GAME.dollars/5), G.GAME.interest_cap/5), card = G.FUNCS.find_activated_tape('c_csau_blooddebts')})
else
    add_round_eval_row({bonus = true, name='interest', pitch = pitch, dollars = G.GAME.interest_amount*math.min(math.floor(G.GAME.dollars/5), G.GAME.interest_cap/5)})
end
'''
match_indent = true
times = 1
