[manifest]
version = "1.0.0"
dump_lua = true
priority = 9999999

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "amount = amount or 1"
position = "after"
payload = '''
    local eff = {}
    SMODS.calculate_context({modify_level_increment = true, card = card, hand = hand, amount = amount}, eff)
    local flags = SMODS.trigger_effects(eff)
    for i, v in ipairs(eff) do
        if v.jokers then
            if v.jokers.mult_inc then
                amount = amount * v.jokers.mult_inc
            end
        end
    end
    check_for_unlock({ type = "hand_level", hand = hand, level = G.GAME.hands[hand].level, level_after = G.GAME.hands[hand].level+amount })
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''
    for k, v in ipairs(G.play.cards) do
        if (not v.shattered) and (not v.destroyed) then
            draw_card(G.play,G.discard, it*100/play_count,'down', false, v)
            it = it + 1
        end
    end
'''
position = "at"
payload = '''
    local text,disp_text,poker_hands,scoring_hand,non_loc_disp_text = G.FUNCS.get_poker_hand_info(G.play.cards)
    local context = { scoring_name = text, scoring_hand = scoring_hand, full_hand = G.play.cards }
    for k, v in ipairs(G.play.cards) do
        if (not v.shattered) and (not v.destroyed) then
            draw_card(G.play, SMODS.return_to_hand(v, context) and G.hand or G.discard, it*100/play_count,'down', false, v)
            it = it + 1
        end
    end
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''
        create_shop_card_ui(card)
        return card
'''
position = "after"
payload = '''
    elseif G.GAME.spawnDeathcards and G.GAME.spawnDeathcards ~= 0 then
		local card = Card(area.T.x + area.T.w/2, area.T.y, G.CARD_W, G.CARD_H, G.P_CARDS.empty, G.P_CENTERS['j_csau_deathcard'])
		create_shop_card_ui(card)
		G.GAME.forcedeath = false
		G.GAME.spawnDeathcards = G.GAME.spawnDeathcards - 1
		return card
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if add and not G.GAME.banned_keys[v.key] then"
position = "before"
payload = '''
if _append == "jud" and v.key == 'j_csau_hell' then
    add = false
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if my_pos and G.jokers.cards[my_pos+1] and not self.getting_sliced and not G.jokers.cards[my_pos+1].ability.eternal and not G.jokers.cards[my_pos+1].getting_sliced then "
position = "at"
payload = "if my_pos and G.jokers.cards[my_pos+1] and not self.getting_sliced and not G.jokers.cards[my_pos+1].ability.eternal and not G.jokers.cards[my_pos+1].getting_sliced and SMODS.will_destroy_card() then "
match_indent = true

# Make Perkeo only copy consumables (and not Stands)
# (Slightly modified code from Cryptid, this should conflict with Cryptid's lovely patch of this,
# but it should maintain Cryptid compatibility, cause it does the same thing)
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if G.consumeables.cards[1] then'''
position = "at"
payload = '''local eligibleJokers = {}
for i = 1, #G.consumeables.cards do
    if G.consumeables.cards[i].ability.consumeable and G.consumeables.cards[i].ability.set ~= "csau_Stand" then
        eligibleJokers[#eligibleJokers + 1] = G.consumeables.cards[i]
    end
end
if #eligibleJokers > 0 then'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''local card = copy_card(pseudorandom_element(G.consumeables.cards, pseudoseed('perkeo')), nil)'''
position = "at"
payload = '''local card = copy_card(pseudorandom_element(eligibleJokers, pseudoseed('perkeo')), nil)'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if self.ability.name == 'Ectoplasm' or self.ability.name == 'Hex' or pseudorandom('wheel_of_fortune') < G.GAME.probabilities.normal/self.ability.extra then'''
position = "at"
payload = '''if self.ability.name == 'Ectoplasm' or self.ability.name == 'Hex' or pseudorandom('wheel_of_fortune') < (G.FUNCS.nutbuster_active() and 3 or G.GAME.probabilities.normal)/self.ability.extra then'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = "elseif _c.name == \"The Wheel of Fortune\" then loc_vars = {G.GAME.probabilities.normal, cfg.extra};  info_queue[#info_queue+1] = G.P_CENTERS.e_foil; info_queue[#info_queue+1] = G.P_CENTERS.e_holo; info_queue[#info_queue+1] = G.P_CENTERS.e_polychrome; "
position = 'at'
payload = "elseif _c.name == \"The Wheel of Fortune\" then loc_vars = {G.FUNCS.nutbuster_active() and 3 or G.GAME.probabilities.normal, _c.config.extra};  info_queue[#info_queue+1] = G.P_CENTERS.e_foil; info_queue[#info_queue+1] = G.P_CENTERS.e_holo; info_queue[#info_queue+1] = G.P_CENTERS.e_polychrome;"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''self.cost = math.max(1, math.floor((self.base_cost + self.extra_cost + 0.5)*(100-G.GAME.discount_percent)/100))'''
position = "at"
payload = '''
local voucher_discount = 0
if self.ability.set == "Voucher" then
    voucher_discount = G.GAME.voucher_discount or 0
end
self.cost = math.max(1, math.floor((self.base_cost + self.extra_cost + 0.5)*(100-(G.GAME.discount_percent-voucher_discount))/100))'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "play_sound('tarot2', 0.76, 0.4);return true end}))"
position = "at"
payload = "play_sound(G.FUNCS.nutbuster_active() and 'csau_doot' or 'tarot2', G.FUNCS.nutbuster_active() and 1 or 0.76, 0.4);return true end}))"
match_indent = true
times = 1